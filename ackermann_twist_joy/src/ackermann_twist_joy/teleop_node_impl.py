#!/usr/bin/env python
"""
@package ackermann_twist_joy
@file teleop_node_impl.py
@author Norawit Nangsue
@brief Convert Input Axes from JoyMessage into Ackermann Drive Message

Copyright (C) FIBO
MIT
"""

import rospy
from ackermann_msgs.msg import AckermannDriveStamped
from sensor_msgs.msg import Joy

# protected region user include package begin #
# protected region user include package end #


class TeleopNodeConfig(object):
    """
    set of static and dynamic parameters
    autogenerated: don't touch this class
    """
    def __init__(self):
        # parameters handled through the parameter server
        self.enb_index = 5
        self.linear_index = 4
        self.steering_index = 0
        self.linear_vel_scale = 0.2
        self.steering_pos_scale = 0.7853975
        pass

    def __str__(self):
        msg = "Instance of TeleopNodeConfig class: {"
        msg += "enb_index: {} ".format(self.enb_index)
        msg += "linear_index: {} ".format(self.linear_index)
        msg += "steering_index: {} ".format(self.steering_index)
        msg += "linear_vel_scale: {} ".format(self.linear_vel_scale)
        msg += "steering_pos_scale: {} ".format(self.steering_pos_scale)
        msg += "}"
        return msg


class TeleopNodeData(object):
    """
    set of input / output handled through the update methods
    autogenerated: don't touch this class
    """
    def __init__(self):
        """
        Definition of the TeleopNodeData attributes
        """
        # input data
        self.in_joy = Joy()
        self.in_joy_updated = bool()
        # output data
        self.out_ackermann_cmd = AckermannDriveStamped()
        self.out_ackermann_cmd_active = bool()
        pass

    def __str__(self):
        msg = "Instance of TeleopNodeData class: \n {"
        msg += "in_joy: {} \n".format(self.in_joy)
        msg += "in_joy_updated: {} \n".format(self.in_joy_updated)
        msg += "out_ackermann_cmd: {} \n".format(self.out_ackermann_cmd_active)
        msg += "out_ackermann_cmd_active: {} \n".format(self.out_ackermann_cmd_active)
        msg += "}"
        return msg


class TeleopNodePassthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        pass


class TeleopNodeImplementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = TeleopNodePassthrough()

        # protected region user member variables begin #
        rospy.loginfo('Ackermann Twist Joy Launched')
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        self.seq = 1
        return True
        # protected region user configure end #

    def update(self, data, config):
        """
        @brief { function_description }

        @param      self The object
        @param      data data handled through the ros class
        @param      config parameters handled through dyn. recon.

        @return nothing
        """
        # protected region user update begin #
        if data.in_joy_updated:
            data.out_ackermann_cmd.header.seq = self.seq
            data.out_ackermann_cmd.header.stamp = rospy.Time.now()
            if data.in_joy.buttons[config.enb_index] == True:
                data.out_ackermann_cmd.drive.speed = data.in_joy.axes[config.linear_index] * config.linear_vel_scale
                data.out_ackermann_cmd.drive.steering_angle = data.in_joy.axes[config.steering_index] * config.steering_pos_scale
            else:
                data.out_ackermann_cmd.drive.speed = 0
            self.seq = self.seq + 1
            data.out_ackermann_cmd_active = True
        else:
            data.out_ackermann_cmd_active = False
        # protected region user update end #

    def terminate(self):
        """
        A function performed when Keyboard Interrupt trigger
	    This gives you a chance to save important data or clean clean object if needed
        """
        # protected region user terminate begin #
        pass
        # protected region user terminate end #


    # protected region user additional functions begin #
    # protected region user additional functions end #
